---
- name: Deploy Local LLM with SRAM SSO + HTTPS (nginx + certbot)
  hosts: all
  become: yes
  vars:
    app_dir: /opt/local-llm

    # Catalog-provided variables:
    public_fqdn: "{{ PUBLIC_FQDN }}"                 # per deployment (DNS must point to VM)
    oidc_issuer_url: "{{ OIDC_ISSUER_URL }}"         # fixed in Catalog
    oidc_client_id: "{{ OIDC_CLIENT_ID }}"           # fixed in Catalog
    oidc_client_secret: "{{ OIDC_CLIENT_SECRET }}"   # fixed in Catalog
    cookie_secret: "{{ COOKIE_SECRET | default('', true) }}"
    certbot_email: "{{ CERTBOT_EMAIL | default('', true) }}"

  pre_tasks:
    - name: Generate COOKIE_SECRET if not supplied
      set_fact:
        cookie_secret: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') | b64encode }}"
      when: cookie_secret | length == 0

    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Docker prerequisites
      apt:
        name: [ca-certificates, curl, gnupg, lsb-release]
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }}/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: ansible_os_family == "Debian"

    - name: Add Docker repo
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }} {{ ansible_facts['distribution_release'] }} stable
      when: ansible_os_family == "Debian"

    - name: Install Docker engine and compose plugin
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: "0755"

  tasks:
    - name: Write docker-compose.yml (with nginx+certbot HTTPS)
      copy:
        dest: "{{ app_dir }}/docker-compose.yml"
        mode: "0644"
        content: |
          version: "3.9"
          services:
            ollama:
              image: ollama/ollama:latest
              container_name: ollama
              restart: unless-stopped
              expose: ["11434"]
              volumes: [ "ollama:/root/.ollama" ]
              networks: [ llm ]
              healthcheck:
                test: ["CMD", "ollama", "list"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 10s

            model-puller:
              image: ollama/ollama:latest
              container_name: ollama-model-puller
              depends_on:
                ollama:
                  condition: service_healthy
              environment:
                - OLLAMA_HOST=http://ollama:11434
              volumes: [ "ollama:/root/.ollama" ]
              networks: [ llm ]
              restart: "no"
              command: ["pull", "gemma3:4b"]

            open-webui:
              image: ghcr.io/open-webui/open-webui:main
              container_name: open-webui
              depends_on:
                ollama:
                  condition: service_healthy
              environment:
                - OLLAMA_BASE_URL=http://ollama:11434
                - WEBUI_AUTH=True
                - WEBUI_NAME=Local LLM
                - DEFAULT_USER_ROLE=admin
              volumes: [ "open-webui:/app/backend/data" ]
              expose: ["8080"]
              networks: [ llm ]
              restart: unless-stopped

            oauth2-proxy:
              image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
              container_name: oauth2-proxy
              restart: unless-stopped
              environment:
                OAUTH2_PROXY_PROVIDER: "oidc"
                OAUTH2_PROXY_OIDC_ISSUER_URL: "${OIDC_ISSUER_URL}"
                OAUTH2_PROXY_CLIENT_ID: "${OIDC_CLIENT_ID}"
                OAUTH2_PROXY_CLIENT_SECRET: "${OIDC_CLIENT_SECRET}"
                OAUTH2_PROXY_COOKIE_SECRET: "${COOKIE_SECRET}"
                OAUTH2_PROXY_COOKIE_SECURE: "true"
                OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
                OAUTH2_PROXY_EMAIL_DOMAINS: "*"
                OAUTH2_PROXY_REDIRECT_URL: "https://${PUBLIC_FQDN}/oauth2/callback"
                OAUTH2_PROXY_SCOPE: "openid email profile"
                OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
                OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: "true"
                OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
              expose: ["4180"]
              networks: [ llm ]

            nginx:
              image: nginx:alpine
              container_name: llm-nginx
              depends_on: [ open-webui, ollama, oauth2-proxy ]
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
                - certbot-www:/var/www/certbot:ro
                - letsencrypt:/etc/letsencrypt:ro
              networks: [ llm ]
              restart: unless-stopped

            certbot:
              image: certbot/certbot:latest
              container_name: certbot
              volumes:
                - certbot-www:/var/www/certbot
                - letsencrypt:/etc/letsencrypt
              entrypoint: /bin/sh
              command: -c "sleep infinity"
              networks: [ llm ]

          networks:
            llm:
              driver: bridge

          volumes:
            ollama:
            open-webui:
            certbot-www:
            letsencrypt:

    - name: Write nginx.conf (HTTP->HTTPS + TLS + oauth2-proxy)
      copy:
        dest: "{{ app_dir }}/nginx.conf"
        mode: "0644"
        content: |
          server {
              listen 80;
              server_name {{ public_fqdn }};

              # ACME HTTP-01 challenge
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }

              # Redirect everything else to HTTPS
              location / {
                  return 301 https://$host$request_uri;
              }
          }

          map $http_upgrade $connection_upgrade {
              default upgrade;
              ''      close;
          }

          server {
              listen 443 ssl http2;
              server_name {{ public_fqdn }};

              ssl_certificate     /etc/letsencrypt/live/{{ public_fqdn }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ public_fqdn }}/privkey.pem;

              # Optional security headers
              add_header X-Frame-Options SAMEORIGIN always;
              add_header X-Content-Type-Options nosniff always;
              add_header Referrer-Policy strict-origin-when-cross-origin always;

              proxy_connect_timeout 600;
              proxy_send_timeout 600;
              proxy_read_timeout 600;
              send_timeout 600;

              proxy_buffering off;
              proxy_request_buffering off;

              # oauth2-proxy endpoints (public)
              location /oauth2/ {
                  proxy_pass http://oauth2-proxy:4180;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Internal subrequest used by auth_request
              location = /oauth2/auth {
                  proxy_pass http://oauth2-proxy:4180/oauth2/auth;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header Host $host;
                  proxy_pass_request_body off;
                  proxy_set_header Content-Length "";
              }

              # Protect Open WebUI
              location / {
                  auth_request /oauth2/auth;

                  auth_request_set $user  $upstream_http_x_auth_request_user;
                  auth_request_set $email $upstream_http_x_auth_request_email;
                  proxy_set_header X-User  $user;
                  proxy_set_header X-Email $email;

                  proxy_pass http://open-webui:8080;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection $connection_upgrade;
                  proxy_set_header X-Forwarded-Host $server_name;
              }

              # Protect Ollama API
              location /ollama/ {
                  auth_request /oauth2/auth;

                  proxy_set_header X-User  $upstream_http_x_auth_request_user;
                  proxy_set_header X-Email $upstream_http_x_auth_request_email;

                  rewrite ^/ollama/(.*)$ /$1 break;
                  proxy_pass http://ollama:11434;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection $connection_upgrade;

                  proxy_buffering off;
                  chunked_transfer_encoding on;
              }
          }

    - name: Write .env with OIDC and domain settings
      copy:
        dest: "{{ app_dir }}/.env"
        mode: "0600"
        content: |
          PUBLIC_FQDN={{ public_fqdn }}
          OIDC_ISSUER_URL={{ oidc_issuer_url }}
          OIDC_CLIENT_ID={{ oidc_client_id }}
          OIDC_CLIENT_SECRET={{ oidc_client_secret }}
          COOKIE_SECRET={{ cookie_secret }}

    - name: Bring up base services (nginx must be up on :80 for ACME)
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        services:
          - nginx
          - oauth2-proxy
          - open-webui
          - ollama
        pull: always
        state: present

    - name: Obtain initial certificate with certbot (HTTP-01)
      community.docker.docker_container:
        name: certbot-once
        image: certbot/certbot:latest
        command: >-
          certonly --webroot -w /var/www/certbot
          -d {{ public_fqdn }}
          --agree-tos
          {% if certbot_email|length > 0 %} --email {{ certbot_email }} {% else %} --register-unsafely-without-email {% endif %}
          --no-eff-email
        auto_remove: true
        state: started
        network_mode: "container:{{ lookup('vars', 'app_dir') | basename }}-nginx"
        volumes:
          - "{{ app_dir }}/:/work:ro"
          - "certbot-www:/var/www/certbot"
          - "letsencrypt:/etc/letsencrypt"
      register: certbot_issue

    - name: Restart nginx to load certs
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        services:
          - nginx
        state: restarted
      when: certbot_issue is succeeded

    - name: Create renewal script
      copy:
        dest: /usr/local/bin/renew-llm-certs.sh
        mode: "0755"
        content: |
          #!/bin/sh
          set -e
          cd {{ app_dir }}
          docker compose run --rm certbot renew --webroot -w /var/www/certbot
          docker compose exec -T nginx nginx -s reload

    - name: Create daily cron job for renewal
      cron:
        name: "Renew LLM TLS certificate"
        minute: "15"
        hour: "3"
        job: "/usr/local/bin/renew-llm-certs.sh >/var/log/renew-llm-certs.log 2>&1"

  post_tasks:
    - name: Show access URL
      debug:
        msg: "Open WebUI (SSO enforced) at https://{{ public_fqdn }}/"